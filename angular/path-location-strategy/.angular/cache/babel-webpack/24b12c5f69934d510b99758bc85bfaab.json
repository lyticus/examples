{"ast":null,"code":"/*! For license information please see index.js.LICENSE.txt */\n!function (t, e) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define(\"Lyticus\", [], e) : \"object\" == typeof exports ? exports.Lyticus = e() : t.Lyticus = e();\n}(\"undefined\" != typeof self ? self : this, function () {\n  return (() => {\n    var t = {\n      810: () => {\n        !function () {\n          if (\"undefined\" != typeof window) try {\n            var t = new window.CustomEvent(\"test\", {\n              cancelable: !0\n            });\n            if (t.preventDefault(), !0 !== t.defaultPrevented) throw new Error(\"Could not prevent default\");\n          } catch (t) {\n            var e = function (t, e) {\n              var r, n;\n              return (e = e || {}).bubbles = !!e.bubbles, e.cancelable = !!e.cancelable, (r = document.createEvent(\"CustomEvent\")).initCustomEvent(t, e.bubbles, e.cancelable, e.detail), n = r.preventDefault, r.preventDefault = function () {\n                n.call(this);\n\n                try {\n                  Object.defineProperty(this, \"defaultPrevented\", {\n                    get: function () {\n                      return !0;\n                    }\n                  });\n                } catch (t) {\n                  this.defaultPrevented = !0;\n                }\n              }, r;\n            };\n\n            e.prototype = window.Event.prototype, window.CustomEvent = e;\n          }\n        }();\n      },\n      808: (t, e, r) => {\n        var n, o, i;\n        void 0 === (o = \"function\" == typeof (n = i = function () {\n          function t() {\n            for (var t = 0, e = {}; t < arguments.length; t++) {\n              var r = arguments[t];\n\n              for (var n in r) e[n] = r[n];\n            }\n\n            return e;\n          }\n\n          function e(t) {\n            return t.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n          }\n\n          return function r(n) {\n            function o() {}\n\n            function i(e, r, i) {\n              if (\"undefined\" != typeof document) {\n                \"number\" == typeof (i = t({\n                  path: \"/\"\n                }, o.defaults, i)).expires && (i.expires = new Date(1 * new Date() + 864e5 * i.expires)), i.expires = i.expires ? i.expires.toUTCString() : \"\";\n\n                try {\n                  var a = JSON.stringify(r);\n                  /^[\\{\\[]/.test(a) && (r = a);\n                } catch (t) {}\n\n                r = n.write ? n.write(r, e) : encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), e = encodeURIComponent(String(e)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\\(\\)]/g, escape);\n                var c = \"\";\n\n                for (var u in i) i[u] && (c += \"; \" + u, !0 !== i[u] && (c += \"=\" + i[u].split(\";\")[0]));\n\n                return document.cookie = e + \"=\" + r + c;\n              }\n            }\n\n            function a(t, r) {\n              if (\"undefined\" != typeof document) {\n                for (var o = {}, i = document.cookie ? document.cookie.split(\"; \") : [], a = 0; a < i.length; a++) {\n                  var c = i[a].split(\"=\"),\n                      u = c.slice(1).join(\"=\");\n                  r || '\"' !== u.charAt(0) || (u = u.slice(1, -1));\n\n                  try {\n                    var s = e(c[0]);\n                    if (u = (n.read || n)(u, s) || e(u), r) try {\n                      u = JSON.parse(u);\n                    } catch (t) {}\n                    if (o[s] = u, t === s) break;\n                  } catch (t) {}\n                }\n\n                return t ? o[t] : o;\n              }\n            }\n\n            return o.set = i, o.get = function (t) {\n              return a(t, !1);\n            }, o.getJSON = function (t) {\n              return a(t, !0);\n            }, o.remove = function (e, r) {\n              i(e, \"\", t(r, {\n                expires: -1\n              }));\n            }, o.defaults = {}, o.withConverter = r, o;\n          }(function () {});\n        }) ? n.call(e, r, e, t) : n) || (t.exports = o), t.exports = i();\n      },\n      753: t => {\n        t.exports = function (t) {\n          var e = typeof t;\n          return !!t && (\"object\" == e || \"function\" == e);\n        };\n      },\n      502: (t, e, r) => {\n        \"use strict\";\n\n        Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        }), e.saveSessionData = e.getSessionData = e.saveLifetimeData = e.getLifetimeData = void 0;\n\n        var n = r(655).__importDefault(r(808));\n\n        function o(t, e) {\n          var r,\n              o = n.default.get(t);\n          if (o) try {\n            r = JSON.parse(o);\n          } catch (t) {\n            r = e;\n          } else r = e;\n          return r;\n        }\n\n        var i = \"_lyticus_lifetime\";\n        e.getLifetimeData = function () {\n          return o(i, {\n            tracked: !1\n          });\n        }, e.saveLifetimeData = function (t) {\n          n.default.set(i, JSON.stringify(t), {\n            expires: 730\n          });\n        };\n        var a = \"_lyticus_session\";\n        e.getSessionData = function () {\n          return o(a, {\n            id: Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15),\n            events: []\n          });\n        }, e.saveSessionData = function (t) {\n          n.default.set(a, JSON.stringify(t), {\n            expires: 1 / 48\n          });\n        };\n      },\n      712: (t, e, r) => {\n        \"use strict\";\n\n        Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        }), e.withEventDispatcher = e.dispatch = void 0, r(810), e.dispatch = function (t, e) {\n          document.dispatchEvent(new CustomEvent(t, {\n            detail: e\n          }));\n        }, e.withEventDispatcher = function (t) {\n          return function (e) {\n            return function () {\n              var r = t.apply(this, arguments),\n                  n = new CustomEvent(e);\n              return n.arguments = arguments, window.dispatchEvent(n), r;\n            };\n          };\n        };\n      },\n      699: (t, e) => {\n        \"use strict\";\n\n        var r;\n        Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        }), e.CustomEventType = void 0, (r = e.CustomEventType || (e.CustomEventType = {})).CONFIGURATION_EVENT = \"lyticus:configuration\", r.PUSH_STATE_EVENT = \"lyticus:pushState\", r.TRACK_EVENT = \"lyticus:track\";\n      },\n      593: (t, e, r) => {\n        \"use strict\";\n\n        Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        }), e.sendToBeacon = e.isLocalhostReferrer = e.isExternalReferrer = e.isDoNotTrack = e.isBodyLoaded = e.getUrlReferrer = e.getEventPath = void 0, r(449), e.getEventPath = function (t) {\n          return t.composedPath && t.composedPath() || t.path || function (t) {\n            for (var e = [], r = t.target; r;) {\n              if (e.push(r), \"HTML\" === r.tagName) return e.push(document), e.push(window), e;\n              r = r.parentElement;\n            }\n\n            return e;\n          }(t);\n        }, e.getUrlReferrer = function (t) {\n          for (var e = [\"referrer\", \"ref\", \"source\", \"utm_source\"], r = new URLSearchParams(t.location.search), n = 0; n < e.length; n++) {\n            var o = e[n],\n                i = r.get(o);\n            if (i) return i;\n          }\n\n          return null;\n        }, e.isBodyLoaded = function (t) {\n          return !!t.document.body;\n        }, e.isDoNotTrack = function (t) {\n          return \"doNotTrack\" in t.navigator && \"1\" === t.navigator.doNotTrack;\n        }, e.isExternalReferrer = function (t) {\n          var e = t.document.referrer,\n              r = t.location.protocol + \"//\" + t.location.hostname;\n          return !e.includes(r);\n        }, e.isLocalhostReferrer = function (t) {\n          return /(^\\w+:|^)\\/\\/localhost:/.test(t.document.referrer);\n        }, e.sendToBeacon = function (t) {\n          var e = new XMLHttpRequest();\n          e.open(\"POST\", \"https://beacon.lyticus.com/event\"), e.setRequestHeader(\"Content-Type\", \"application/json\"), e.send(JSON.stringify(t));\n        };\n      },\n      655: (t, e, r) => {\n        \"use strict\";\n\n        r.r(e), r.d(e, {\n          __extends: () => o,\n          __assign: () => i,\n          __rest: () => a,\n          __decorate: () => c,\n          __param: () => u,\n          __metadata: () => s,\n          __awaiter: () => f,\n          __generator: () => l,\n          __createBinding: () => p,\n          __exportStar: () => d,\n          __values: () => h,\n          __read: () => y,\n          __spread: () => v,\n          __spreadArrays: () => w,\n          __spreadArray: () => g,\n          __await: () => m,\n          __asyncGenerator: () => _,\n          __asyncDelegator: () => b,\n          __asyncValues: () => S,\n          __makeTemplateObject: () => P,\n          __importStar: () => O,\n          __importDefault: () => T,\n          __classPrivateFieldGet: () => k,\n          __classPrivateFieldSet: () => j\n        });\n\n        var n = function (t, e) {\n          return (n = Object.setPrototypeOf || {\n            __proto__: []\n          } instanceof Array && function (t, e) {\n            t.__proto__ = e;\n          } || function (t, e) {\n            for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n          })(t, e);\n        };\n\n        function o(t, e) {\n          if (\"function\" != typeof e && null !== e) throw new TypeError(\"Class extends value \" + String(e) + \" is not a constructor or null\");\n\n          function r() {\n            this.constructor = t;\n          }\n\n          n(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r());\n        }\n\n        var i = function () {\n          return (i = Object.assign || function (t) {\n            for (var e, r = 1, n = arguments.length; r < n; r++) for (var o in e = arguments[r]) Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);\n\n            return t;\n          }).apply(this, arguments);\n        };\n\n        function a(t, e) {\n          var r = {};\n\n          for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && e.indexOf(n) < 0 && (r[n] = t[n]);\n\n          if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) {\n            var o = 0;\n\n            for (n = Object.getOwnPropertySymbols(t); o < n.length; o++) e.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, n[o]) && (r[n[o]] = t[n[o]]);\n          }\n\n          return r;\n        }\n\n        function c(t, e, r, n) {\n          var o,\n              i = arguments.length,\n              a = i < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n;\n          if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) a = Reflect.decorate(t, e, r, n);else for (var c = t.length - 1; c >= 0; c--) (o = t[c]) && (a = (i < 3 ? o(a) : i > 3 ? o(e, r, a) : o(e, r)) || a);\n          return i > 3 && a && Object.defineProperty(e, r, a), a;\n        }\n\n        function u(t, e) {\n          return function (r, n) {\n            e(r, n, t);\n          };\n        }\n\n        function s(t, e) {\n          if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.metadata) return Reflect.metadata(t, e);\n        }\n\n        function f(t, e, r, n) {\n          return new (r || (r = Promise))(function (o, i) {\n            function a(t) {\n              try {\n                u(n.next(t));\n              } catch (t) {\n                i(t);\n              }\n            }\n\n            function c(t) {\n              try {\n                u(n.throw(t));\n              } catch (t) {\n                i(t);\n              }\n            }\n\n            function u(t) {\n              var e;\n              t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function (t) {\n                t(e);\n              })).then(a, c);\n            }\n\n            u((n = n.apply(t, e || [])).next());\n          });\n        }\n\n        function l(t, e) {\n          var r,\n              n,\n              o,\n              i,\n              a = {\n            label: 0,\n            sent: function () {\n              if (1 & o[0]) throw o[1];\n              return o[1];\n            },\n            trys: [],\n            ops: []\n          };\n          return i = {\n            next: c(0),\n            throw: c(1),\n            return: c(2)\n          }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function () {\n            return this;\n          }), i;\n\n          function c(i) {\n            return function (c) {\n              return function (i) {\n                if (r) throw new TypeError(\"Generator is already executing.\");\n\n                for (; a;) try {\n                  if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;\n\n                  switch (n = 0, o && (i = [2 & i[0], o.value]), i[0]) {\n                    case 0:\n                    case 1:\n                      o = i;\n                      break;\n\n                    case 4:\n                      return a.label++, {\n                        value: i[1],\n                        done: !1\n                      };\n\n                    case 5:\n                      a.label++, n = i[1], i = [0];\n                      continue;\n\n                    case 7:\n                      i = a.ops.pop(), a.trys.pop();\n                      continue;\n\n                    default:\n                      if (!((o = (o = a.trys).length > 0 && o[o.length - 1]) || 6 !== i[0] && 2 !== i[0])) {\n                        a = 0;\n                        continue;\n                      }\n\n                      if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                        a.label = i[1];\n                        break;\n                      }\n\n                      if (6 === i[0] && a.label < o[1]) {\n                        a.label = o[1], o = i;\n                        break;\n                      }\n\n                      if (o && a.label < o[2]) {\n                        a.label = o[2], a.ops.push(i);\n                        break;\n                      }\n\n                      o[2] && a.ops.pop(), a.trys.pop();\n                      continue;\n                  }\n\n                  i = e.call(t, a);\n                } catch (t) {\n                  i = [6, t], n = 0;\n                } finally {\n                  r = o = 0;\n                }\n\n                if (5 & i[0]) throw i[1];\n                return {\n                  value: i[0] ? i[1] : void 0,\n                  done: !0\n                };\n              }([i, c]);\n            };\n          }\n        }\n\n        var p = Object.create ? function (t, e, r, n) {\n          void 0 === n && (n = r), Object.defineProperty(t, n, {\n            enumerable: !0,\n            get: function () {\n              return e[r];\n            }\n          });\n        } : function (t, e, r, n) {\n          void 0 === n && (n = r), t[n] = e[r];\n        };\n\n        function d(t, e) {\n          for (var r in t) \"default\" === r || Object.prototype.hasOwnProperty.call(e, r) || p(e, t, r);\n        }\n\n        function h(t) {\n          var e = \"function\" == typeof Symbol && Symbol.iterator,\n              r = e && t[e],\n              n = 0;\n          if (r) return r.call(t);\n          if (t && \"number\" == typeof t.length) return {\n            next: function () {\n              return t && n >= t.length && (t = void 0), {\n                value: t && t[n++],\n                done: !t\n              };\n            }\n          };\n          throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n        }\n\n        function y(t, e) {\n          var r = \"function\" == typeof Symbol && t[Symbol.iterator];\n          if (!r) return t;\n          var n,\n              o,\n              i = r.call(t),\n              a = [];\n\n          try {\n            for (; (void 0 === e || e-- > 0) && !(n = i.next()).done;) a.push(n.value);\n          } catch (t) {\n            o = {\n              error: t\n            };\n          } finally {\n            try {\n              n && !n.done && (r = i.return) && r.call(i);\n            } finally {\n              if (o) throw o.error;\n            }\n          }\n\n          return a;\n        }\n\n        function v() {\n          for (var t = [], e = 0; e < arguments.length; e++) t = t.concat(y(arguments[e]));\n\n          return t;\n        }\n\n        function w() {\n          for (var t = 0, e = 0, r = arguments.length; e < r; e++) t += arguments[e].length;\n\n          var n = Array(t),\n              o = 0;\n\n          for (e = 0; e < r; e++) for (var i = arguments[e], a = 0, c = i.length; a < c; a++, o++) n[o] = i[a];\n\n          return n;\n        }\n\n        function g(t, e, r) {\n          if (r || 2 === arguments.length) for (var n, o = 0, i = e.length; o < i; o++) !n && o in e || (n || (n = Array.prototype.slice.call(e, 0, o)), n[o] = e[o]);\n          return t.concat(n || e);\n        }\n\n        function m(t) {\n          return this instanceof m ? (this.v = t, this) : new m(t);\n        }\n\n        function _(t, e, r) {\n          if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n          var n,\n              o = r.apply(t, e || []),\n              i = [];\n          return n = {}, a(\"next\"), a(\"throw\"), a(\"return\"), n[Symbol.asyncIterator] = function () {\n            return this;\n          }, n;\n\n          function a(t) {\n            o[t] && (n[t] = function (e) {\n              return new Promise(function (r, n) {\n                i.push([t, e, r, n]) > 1 || c(t, e);\n              });\n            });\n          }\n\n          function c(t, e) {\n            try {\n              (r = o[t](e)).value instanceof m ? Promise.resolve(r.value.v).then(u, s) : f(i[0][2], r);\n            } catch (t) {\n              f(i[0][3], t);\n            }\n\n            var r;\n          }\n\n          function u(t) {\n            c(\"next\", t);\n          }\n\n          function s(t) {\n            c(\"throw\", t);\n          }\n\n          function f(t, e) {\n            t(e), i.shift(), i.length && c(i[0][0], i[0][1]);\n          }\n        }\n\n        function b(t) {\n          var e, r;\n          return e = {}, n(\"next\"), n(\"throw\", function (t) {\n            throw t;\n          }), n(\"return\"), e[Symbol.iterator] = function () {\n            return this;\n          }, e;\n\n          function n(n, o) {\n            e[n] = t[n] ? function (e) {\n              return (r = !r) ? {\n                value: m(t[n](e)),\n                done: \"return\" === n\n              } : o ? o(e) : e;\n            } : o;\n          }\n        }\n\n        function S(t) {\n          if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n          var e,\n              r = t[Symbol.asyncIterator];\n          return r ? r.call(t) : (t = h(t), e = {}, n(\"next\"), n(\"throw\"), n(\"return\"), e[Symbol.asyncIterator] = function () {\n            return this;\n          }, e);\n\n          function n(r) {\n            e[r] = t[r] && function (e) {\n              return new Promise(function (n, o) {\n                !function (t, e, r, n) {\n                  Promise.resolve(n).then(function (e) {\n                    t({\n                      value: e,\n                      done: r\n                    });\n                  }, e);\n                }(n, o, (e = t[r](e)).done, e.value);\n              });\n            };\n          }\n        }\n\n        function P(t, e) {\n          return Object.defineProperty ? Object.defineProperty(t, \"raw\", {\n            value: e\n          }) : t.raw = e, t;\n        }\n\n        var E = Object.create ? function (t, e) {\n          Object.defineProperty(t, \"default\", {\n            enumerable: !0,\n            value: e\n          });\n        } : function (t, e) {\n          t.default = e;\n        };\n\n        function O(t) {\n          if (t && t.__esModule) return t;\n          var e = {};\n          if (null != t) for (var r in t) \"default\" !== r && Object.prototype.hasOwnProperty.call(t, r) && p(e, t, r);\n          return E(e, t), e;\n        }\n\n        function T(t) {\n          return t && t.__esModule ? t : {\n            default: t\n          };\n        }\n\n        function k(t, e, r, n) {\n          if (\"a\" === r && !n) throw new TypeError(\"Private accessor was defined without a getter\");\n          if (\"function\" == typeof e ? t !== e || !n : !e.has(t)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n          return \"m\" === r ? n : \"a\" === r ? n.call(t) : n ? n.value : e.get(t);\n        }\n\n        function j(t, e, r, n, o) {\n          if (\"m\" === n) throw new TypeError(\"Private method is not writable\");\n          if (\"a\" === n && !o) throw new TypeError(\"Private accessor was defined without a setter\");\n          if (\"function\" == typeof e ? t !== e || !o : !e.has(t)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n          return \"a\" === n ? o.call(t, r) : o ? o.value = r : e.set(t, r), r;\n        }\n      },\n      449: function (t, e, r) {\n        !function (t) {\n          \"use strict\";\n\n          var e,\n              r = function () {\n            try {\n              if (t.URLSearchParams && \"bar\" === new t.URLSearchParams(\"foo=bar\").get(\"foo\")) return t.URLSearchParams;\n            } catch (t) {}\n\n            return null;\n          }(),\n              n = r && \"a=1\" === new r({\n            a: 1\n          }).toString(),\n              o = r && \"+\" === new r(\"s=%2B\").get(\"s\"),\n              i = !r || ((e = new r()).append(\"s\", \" &\"), \"s=+%26\" === e.toString()),\n              a = f.prototype,\n              c = !(!t.Symbol || !t.Symbol.iterator);\n\n          if (!(r && n && o && i)) {\n            var u;\n            a.append = function (t, e) {\n              y(this.__URLSearchParams__, t, e);\n            }, a.delete = function (t) {\n              delete this.__URLSearchParams__[t];\n            }, a.get = function (t) {\n              var e = this.__URLSearchParams__;\n              return this.has(t) ? e[t][0] : null;\n            }, a.getAll = function (t) {\n              var e = this.__URLSearchParams__;\n              return this.has(t) ? e[t].slice(0) : [];\n            }, a.has = function (t) {\n              return w(this.__URLSearchParams__, t);\n            }, a.set = function (t, e) {\n              this.__URLSearchParams__[t] = [\"\" + e];\n            }, a.toString = function () {\n              var t,\n                  e,\n                  r,\n                  n,\n                  o = this.__URLSearchParams__,\n                  i = [];\n\n              for (e in o) for (r = l(e), t = 0, n = o[e]; t < n.length; t++) i.push(r + \"=\" + l(n[t]));\n\n              return i.join(\"&\");\n            }, o && r && !n && t.Proxy ? (u = new Proxy(r, {\n              construct: function (t, e) {\n                return new t(new f(e[0]).toString());\n              }\n            })).toString = Function.prototype.toString.bind(f) : u = f, Object.defineProperty(t, \"URLSearchParams\", {\n              value: u\n            });\n            var s = t.URLSearchParams.prototype;\n            s.polyfill = !0, s.forEach = s.forEach || function (t, e) {\n              var r = h(this.toString());\n              Object.getOwnPropertyNames(r).forEach(function (n) {\n                r[n].forEach(function (r) {\n                  t.call(e, r, n, this);\n                }, this);\n              }, this);\n            }, s.sort = s.sort || function () {\n              var t,\n                  e,\n                  r,\n                  n = h(this.toString()),\n                  o = [];\n\n              for (t in n) o.push(t);\n\n              for (o.sort(), e = 0; e < o.length; e++) this.delete(o[e]);\n\n              for (e = 0; e < o.length; e++) {\n                var i = o[e],\n                    a = n[i];\n\n                for (r = 0; r < a.length; r++) this.append(i, a[r]);\n              }\n            }, s.keys = s.keys || function () {\n              var t = [];\n              return this.forEach(function (e, r) {\n                t.push(r);\n              }), d(t);\n            }, s.values = s.values || function () {\n              var t = [];\n              return this.forEach(function (e) {\n                t.push(e);\n              }), d(t);\n            }, s.entries = s.entries || function () {\n              var t = [];\n              return this.forEach(function (e, r) {\n                t.push([r, e]);\n              }), d(t);\n            }, c && (s[t.Symbol.iterator] = s[t.Symbol.iterator] || s.entries);\n          }\n\n          function f(t) {\n            ((t = t || \"\") instanceof URLSearchParams || t instanceof f) && (t = t.toString()), this.__URLSearchParams__ = h(t);\n          }\n\n          function l(t) {\n            var e = {\n              \"!\": \"%21\",\n              \"'\": \"%27\",\n              \"(\": \"%28\",\n              \")\": \"%29\",\n              \"~\": \"%7E\",\n              \"%20\": \"+\",\n              \"%00\": \"\\0\"\n            };\n            return encodeURIComponent(t).replace(/[!'\\(\\)~]|%20|%00/g, function (t) {\n              return e[t];\n            });\n          }\n\n          function p(t) {\n            return t.replace(/[ +]/g, \"%20\").replace(/(%[a-f0-9]{2})+/gi, function (t) {\n              return decodeURIComponent(t);\n            });\n          }\n\n          function d(e) {\n            var r = {\n              next: function () {\n                var t = e.shift();\n                return {\n                  done: void 0 === t,\n                  value: t\n                };\n              }\n            };\n            return c && (r[t.Symbol.iterator] = function () {\n              return r;\n            }), r;\n          }\n\n          function h(t) {\n            var e = {};\n            if (\"object\" == typeof t) {\n              if (v(t)) for (var r = 0; r < t.length; r++) {\n                var n = t[r];\n                if (!v(n) || 2 !== n.length) throw new TypeError(\"Failed to construct 'URLSearchParams': Sequence initializer must only contain pair elements\");\n                y(e, n[0], n[1]);\n              } else for (var o in t) t.hasOwnProperty(o) && y(e, o, t[o]);\n            } else {\n              0 === t.indexOf(\"?\") && (t = t.slice(1));\n\n              for (var i = t.split(\"&\"), a = 0; a < i.length; a++) {\n                var c = i[a],\n                    u = c.indexOf(\"=\");\n                -1 < u ? y(e, p(c.slice(0, u)), p(c.slice(u + 1))) : c && y(e, p(c), \"\");\n              }\n            }\n            return e;\n          }\n\n          function y(t, e, r) {\n            var n = \"string\" == typeof r ? r : null != r && \"function\" == typeof r.toString ? r.toString() : JSON.stringify(r);\n            w(t, e) ? t[e].push(n) : t[e] = [n];\n          }\n\n          function v(t) {\n            return !!t && \"[object Array]\" === Object.prototype.toString.call(t);\n          }\n\n          function w(t, e) {\n            return Object.prototype.hasOwnProperty.call(t, e);\n          }\n        }(void 0 !== r.g ? r.g : \"undefined\" != typeof window ? window : this);\n      }\n    },\n        e = {};\n\n    function r(n) {\n      var o = e[n];\n      if (void 0 !== o) return o.exports;\n      var i = e[n] = {\n        exports: {}\n      };\n      return t[n].call(i.exports, i, i.exports, r), i.exports;\n    }\n\n    r.d = (t, e) => {\n      for (var n in e) r.o(e, n) && !r.o(t, n) && Object.defineProperty(t, n, {\n        enumerable: !0,\n        get: e[n]\n      });\n    }, r.g = function () {\n      if (\"object\" == typeof globalThis) return globalThis;\n\n      try {\n        return this || new Function(\"return this\")();\n      } catch (t) {\n        if (\"object\" == typeof window) return window;\n      }\n    }(), r.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), r.r = t => {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(t, \"__esModule\", {\n        value: !0\n      });\n    };\n    var n = {};\n    return (() => {\n      \"use strict\";\n\n      var t = n,\n          e = r(655),\n          o = e.__importDefault(r(753)),\n          i = r(712),\n          a = r(502),\n          c = r(593),\n          u = r(699),\n          s = {\n        cookies: !0,\n        development: !1,\n        getPath: function () {\n          return window.location.pathname;\n        }\n      },\n          f = function () {\n        function t(t, r) {\n          if (void 0 === r && (r = {}), !t) throw new Error(\"websiteId must be defined\");\n          if (!o.default(r)) throw new Error(\"options must be an object\");\n          this.state = {\n            websiteId: t,\n            referrerTracked: !1,\n            urlReferrerTracked: !1,\n            events: [],\n            previousPath: null\n          }, this.options = e.__assign(e.__assign({}, s), r), window.__LYTICUS__ = this.state, i.dispatch(u.CustomEventType.CONFIGURATION_EVENT, this.state);\n        }\n\n        return t.prototype.track = function (t, r) {\n          var n = this;\n\n          if (c.isBodyLoaded(window)) {\n            if (!c.isDoNotTrack(window)) {\n              var o = e.__assign(e.__assign({}, t), {\n                newVisitor: !1,\n                time: new Date().getTime(),\n                unique: !1,\n                websiteId: this.state.websiteId\n              });\n\n              if (this.options.cookies) {\n                var s = a.getLifetimeData();\n                s.tracked || (o.newVisitor = !0, s.tracked = !0, a.saveLifetimeData(s));\n                var f = a.getSessionData();\n                o.sessionId = f.id, \"page\" !== o.type || f.events.find(function (t) {\n                  return \"page\" === t.type && t.path === o.path;\n                }) || (o.unique = !0, f.events.push({\n                  type: o.type,\n                  path: o.path\n                })), a.saveSessionData(f);\n              }\n\n              this.options.development || c.sendToBeacon(o), this.state.events.push(o), i.dispatch(u.CustomEventType.TRACK_EVENT, o), r && setTimeout(r, 300);\n            }\n          } else document.addEventListener(\"DOMContentLoaded\", function () {\n            return n.track(t, r);\n          });\n        }, t.prototype.trackNavigator = function () {\n          this.track({\n            type: \"navigator\",\n            screenWidth: window.innerWidth,\n            language: window.navigator.language,\n            userAgent: window.navigator.userAgent\n          });\n        }, t.prototype.trackPage = function (t) {\n          var e = {\n            type: \"page\",\n            path: t || this.options.getPath()\n          };\n\n          if (e.path !== this.state.previousPath) {\n            if (this.state.previousPath = e.path, !this.state.referrerTracked && !c.isLocalhostReferrer(window) && c.isExternalReferrer(window)) {\n              var r = document.referrer;\n              r && r.length && (e.referrer = r, this.state.referrerTracked = !0);\n            }\n\n            if (!this.state.urlReferrerTracked) {\n              var n = c.getUrlReferrer(window);\n              n && n.length && (e.urlReferrer = n, this.state.urlReferrerTracked = !0);\n            }\n\n            this.track(e);\n          }\n        }, t.prototype.trackClick = function (t, e) {\n          this.track({\n            type: \"click\",\n            path: e || this.options.getPath(),\n            value: t\n          });\n        }, t.prototype.trackOutboundClick = function (t, e, r) {\n          this.track({\n            type: \"click\",\n            path: r || this.options.getPath(),\n            value: t\n          }, function () {\n            window.location.href = e;\n          });\n        }, t.prototype.startHistoryMode = function () {\n          var t = this;\n          return !(!window.history || !window.history.pushState || (window.history.pushState = i.withEventDispatcher(window.history.pushState)(u.CustomEventType.PUSH_STATE_EVENT), window.addEventListener(u.CustomEventType.PUSH_STATE_EVENT, function () {\n            return t.trackPage();\n          }), this.trackPage(), 0));\n        }, t.prototype.stopHistoryMode = function () {\n          console.warn(\"Stopping history mode is currently not supported\");\n        }, t.prototype.clickTracker = function () {\n          var t = this;\n          return function (e) {\n            for (var r = 0, n = c.getEventPath(e) || []; r < n.length; r++) {\n              var o = n[r].dataset;\n\n              if (o && o.trackClick) {\n                t.trackClick(o.trackClick);\n                break;\n              }\n            }\n          };\n        }, t.prototype.getEvents = function () {\n          return this.state.events;\n        }, t;\n      }();\n\n      t.default = f;\n    })(), n.default;\n  })();\n}); //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"script"}